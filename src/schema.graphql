 type Query {
  feed(filter: String, skip: Int, take: Int, cursor: String): LinksPayload!,
  user(id: Int!): User!,
  allUsers: [User!]!,
  me: User!,
  imgur: ImgurPayload!
}

type Mutation {
  createPost(description: String!, musicUrl: String, imageLink: String, deleteHash: String, lat: Float, lng: Float): Link!
  deletePost(id: Int!): Link!
  signup(email: String!, password: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
  vote(value: Int!, postId: Int!): Boolean!
  logout: Boolean!,
  logWithValidToken: Boolean!,
  changeAvatar(imageLink: String!, deletehash: String!): Boolean!
}

type Subscription {
  postCreated: PostCreatedPayload!
  postDeleted: PostDeletedPayload!
  postVoted: VotePayload!
  userIsOnline: IsOnlinePayload!
}

type Link {
  id: Int!
  createdAt: String!
  description: String!
  musicUrl: String
  postedById: Int!
  postedBy: User!
  votesUp: Int!
  votesDown: Int!
  voteValue: Int!
  imageLink: String
  deleteHash: String
  lat: Float
  lng: Float
}

type User {
  id:    Int!
  name:  String
  email: String!
  imageLink: String
  deletehash: String
  links: [Link]
  lastTime: String
}

type LinksPayload {
  posts: [Link!]!
  hasMore: Boolean!
}

type AuthPayload {
  user: User!
  token: String!
}

type Updoot {
  postId: Int!
  userId: Int!
  value:  Int!
}

type VotePayload {
  value: Int!
  postId: Int!
  userId: Int!
}

type PostCreatedPayload {
  newPost: Link!
  userId: Int!
}

type PostDeletedPayload {
  postId: Int!
  userId: Int!
}

type IsOnlinePayload {
  userId: Int!
  lastTime: String
}

type ImgurPayload {
  isAuthed: Boolean!
  clientId: String!
  accessToken: String!
}
